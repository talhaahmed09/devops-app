pipeline {
    agent any

    environment {
        ENVIRONMENT = "${BRANCH_NAME.toLowerCase()}" // Capture the branch name
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build and Push Docker Images') {
            when {
                expression {
                    return ENVIRONMENT in ['main', 'qa', 'uat']
                }
            }
            steps {
                // Build and push the Docker images for your applications
                sh 'docker build -t react-app:latest ./react-deploy'
                sh 'docker build -t spring-app-image:latest ./hello-world'
                sh 'docker push react-app-image:latest'
                sh 'docker push spring-app-image:latest'
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                expression {
                    return ENVIRONMENT in ['main', 'qa', 'uat']
                }
            }
            steps {
                // Determine the manifest file based on the environment
                def manifestFile = "${ENVIRONMENT}-deployment.yaml"

                // Deploy the app to Kubernetes using the Kubernetes Plugin
                kubernetesDeploy(
                    kubectl: 'kubectl',
                    namespace: 'default', // Modify the namespace as needed
                    manifests: manifestFile
                )
            }
        }
    }
}
